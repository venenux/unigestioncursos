' Gambas class file

Event Click()
Event DblClick()

Property SubMenu As Menu
Property verDefault As Boolean
Property verExport As Boolean
Property posButtons As Integer
Property source As Variant

Private elegidos As String[]
Private $SubMenu As Menu
Private $verDefault As Boolean
Private $Export As Boolean
Private $posButtons As Integer
Private $obs As Observer
Private $original As Variant[]
Private $origtitl As Variant[]
Private $filtro As Variant[]

Public Sub Form_Open()
    
    Inc Application.Busy
    $original = New Variant[]
    $obs = New Observer(grid) As "Grid"
    elegidos = New String[]
    Dec Application.Busy
    grid.SetFocus()
    $filtro = New Variant[] 
    
End

Public Sub bAutofiltro_Click()
    
    Dim ar As New Variant[]
    Dim c As New String[]
    Dim n As Integer
    
    If grid.column > -1 Then
        Inc Application.Busy
        $Filtro.Add([" and ", grid.column, "=", grid[grid.row, grid.column].richtext])
        If grid.setHeads Then
            For n = 0 To grid.Columns.Max
                c.Add(grid.Columns[n].Title)
            Next
            ' ar.Add(c) ' la primera tiene los titulos, no agregar si settitles es true
        Else
            ar.Add(c)
        Endif
        For n = 0 To $original.Max
            If lineOk(n) Then
                ar.Add($original[n].copy())
            Endif
        Next
        grid.source = ar
        Dec Application.Busy
    Endif
    
End

Private Function lineOk(fila As Integer) As Boolean
    
    Dim i As Integer
    
    For i = 0 To $filtro.Max
        Select Case $filtro[i][2]
            Case "="    
                If $original[fila][$filtro[i][1]] <> $filtro[i][3] Then
                    Return False
                Endif
            Case "in"    
                If InStr(LCase($original[fila][$filtro[i][1]]), LCase($filtro[i][3])) = 0 Then
                    Return False
                Endif
            Case ">"
                If $original[fila][$filtro[i][1]] <= $filtro[i][3] Then
                    Return False
                Endif
            Case "<"
                If $original[fila][$filtro[i][1]] >= $filtro[i][3] Then
                    Return False
                Endif
        End Select        
    Next
    Return True
    
End

Public Sub grid_Click()
    
    If grid.isShift = True Then
        bAutofiltro_Click()
        Stop Event
    Endif
    
End

Private Function source_Read() As Variant
    
    Return grid.source
    
End

Private Sub source_Write(Value As Variant)
    
    Dim n As Integer
    Dim c As String[]
    
    grid.source = Value
    $origtitl = grid.titles               ' fix set header after reset filters
    For n = 0 To grid.source.Count - 1
        c = grid.source[n]
        $original.Add(c.Copy())
    Next
    
End

Public Sub bTodos_Click()
    
    grid.source = $original ' al reiniciar los filtros simplemente volvemos rellenar con una copia original
    grid.titles = $origtitl ' esta puede evitarse pero para fines educativos, para optimizar quitar
    $filtro = New Variant[] ' y borramos todos los filtros con una nueva variable interna privada de ellos
    
End

Public Sub strSplit(cadena As String, asep As String[]) As Collection
    
    Dim cad As String
    Dim n, i, nsince, nhowmany As Integer
    Dim cReturn As New Collection
    Dim lowSep As New String[]
    
    cad = LCase(cadena)
    For n = 0 To asep.Count - 1
        lowSep.Add(LCase(asep[n]))
    Next
    For n = 0 To asep.Count - 1
        nsince = InStr(cad, lowSep[n]) 
        If nsince > 0 Then
            nsince += Len(asep[n])   
            If n < asep.count Then
                For i = n + 1 To asep.count - 1
                    If InStr(cad, lowsep[i])
                        nhowmany = (InStr(cad, lowsep[i])) - nsince
                        Break
                    Endif
                Next
                If nhowmany = 0 Then
                    nhowmany = Len(cad) - nsince + 1    
                Endif
            Endif
            cReturn.Add(Mid(cadena, nsince, nhowmany), asep[n])
        Else
            cReturn.Add("", asep[n])
        Endif
        nhowmany = 0
    Next 
    Return cReturn
    
End

Public Sub bBuscar_Click()
    
    Dim ar As New Variant[]
    Dim c As New String[]
    Dim n As Integer
    
    If grid.column > -1 Then
        Inc Application.Busy
        $Filtro.Add([" and ", grid.column, "in", buscar.Text])
        If grid.setHeads Then
            For n = 0 To grid.Columns.Max
                c.Add(grid.Columns[n].Title)
            Next
        Else
            ar.Add(c)   ' cuando esta source ya listo, la primera linea es el titulos
        Endif
        For n = 0 To $original.Max
            If lineOk(n) Then
                ar.Add($original[n].copy())
            Endif
        Next
        grid.source = ar
        Dec Application.Busy
    Else
        Message.Warning("Debes hacer click primero en la columna por la que deseas filtrar") 
    Endif
    
End

Public Sub buscar_KeyRelease()
    
    If Key.code = Key.Enter Or Key.Code = Key.Return Then
        bBuscar_Click()
        If buscar.find(buscar.Text) Then 
            buscar.Add(buscar.text)
        Endif
    Endif
    
End

Public Sub bVerfiltro_Click()
    
    Dim filtro, s As String
    Dim i As Integer
    
    If $filtro.count = 0 Then
        Balloon("No hay filtros activos sobre el original", bVerfiltro)
        Return
    Endif
    For i = 0 To $filtro.Max
        s = " y que además " 
        Select Case $filtro[i][2]
            Case "="    
                s &= grid.Columns[$filtro[i][1]].title & " sea igual a " & $filtro[i][3]
                '     If $original[fila][$filtro[i][1]] <> $filtro[i][3] Then
                '         Return False
                '     Endif
            Case "in"    
                s &= grid.Columns[$filtro[i][1]].title & " contenga " & $filtro[i][3]
                '     If InStr($original[fila][$filtro[i][1]], $filtro[i][3]) = 0 Then
                '         Return False
                '     Endif
            Case ">"
                s &= grid.Columns[$filtro[i][1]].title & " sea mayor que " & $filtro[i][3]
                '     If $original[fila][$filtro[i][1]] <= $filtro[i][3] Then
                '         Return False
                '     Endif
            Case "<"
                s &= grid.Columns[$filtro[i][1]].title & " sea menor que " & $filtro[i][3]
                
                '     If $original[fila][$filtro[i][1]] >= $filtro[i][3] Then
                '         Return False
                '     Endif
        End Select        
        filtro &= s
    Next
    filtro = "Ver los que " & Mid(filtro, 15)
    Message(filtro)    
    Return 
    
End 

Private Function SubMenu_Read() As Menu
    
    Return $SubMenu  
    
End

Private Sub SubMenu_Write(Value As Menu)
    
    Dim n As Integer
    Dim existe As Boolean
    Dim nMenu As Menu
    
    If IsNull(value) Then 
        grid.PopupMenu = ""
        $submenu = Null
        Return
    Endif
    For n = 0 To Me.Menus.Count - 1
        If Me.Menus[n].name = Value.Name Then 
            existe = True
            Break
        Endif
    Next
    If Not existe Then 
        nMenu = New Menu(Me)  'Al recibir el menu por primera vez se crean dos menús, el que se recibe y el combinado
        nMenu.name = Value.name
        addMenu(nMenu, Value)
        nMenu = New Menu(Me)
        nMenu.Name = "Combi" & Value.name
        addMenu(nMenu, Me.Menus[0])
        addMenu(nMenu, Value)
    Endif
    If value.name = "mDefault" Then 
        If $verDefault Then 
            grid.PopupMenu = value.Name
        Endif
    Else
        If $verDefault Then         
            grid.PopupMenu = "Combi" & value.Name
        Else
            grid.PopupMenu = Value.Name
        Endif
    Endif
    For n = 0 To Me.Menus.Count - 1
        If Me.Menus[n].name = grid.PopupMenu Then
            $submenu = Me.Menus[n]
            Break
        Endif
    Next
    
End

Private Sub addMenu(nMenu As Menu, elmenu As Menu)
    
    Dim opcion, op As Menu
    
    For Each opcion In elmenu.children 'metemos el menú por defecto
        op = New Menu(nMenu)
        op.Action = opcion.Action
        op.Caption = opcion.Caption
        op.Picture = opcion.Picture
        op.Visible = opcion.Visible
        op.Enabled = opcion.Enabled
        op.Toggle = opcion.Toggle
        op.Checked = opcion.Checked
        op.Radio = opcion.Radio
    Next
    
End

Public Sub Action_Activate(opcion As String) As String
    
    Dim g As Exgridfilter
    
    Select Case opcion
        Case "mFiltrar"
            bAutofiltro_Click()
        Case "mFiltro"
            '     bavanzado_Click()
        Case "mNofiltrar"
            bTodos_Click()
        Case "mVerFiltro"
            bVerfiltro_Click()
        Case "mOrdenar" 
            grid.grid_ColumnClick(grid.column) 
        Case "mExportar"
            exportar()
        Case Else
            g = Me.parent
            g.SubMenus(opcion)
    End Select
    
End

Private Function verExport_Read() As Boolean
    
    Return $Export
    
End

Private Sub verExport_Write(Value As Boolean)
    
    $Export = Value
    Me.Menus[0].Children[5].Visible = Value
    If $submenu And If $verDefault Then 
        $submenu.Children[5].visible = Value
    Endif
    
End

'' exportar a csv, esta cualidad la migrare a una clase que exporta a csv y odt usando soffice si es detectado
Public Sub exportar()
    
    Dim c, fila, columna As Integer
    Dim csv, linea As String
    
    Dialog.title = "Exportar fichero CSV"
    Dialog.filter = ["*.csv", "Ficheros.csv"]
    Dialog.autoext = True
    If Dialog.SaveFile() Then Return
    Inc Application.Busy
    fila = grid.Row
    columna = grid.Column
    For c = 0 To grid.Columns.Count - 1
        linea &= "\"" & grid.Columns[c].Title & "\";"
    Next
    linea = Left(linea, -1) & gb.NewLine
    csv = linea
    grid.rslt.MoveFirst
    While grid.rslt.Available
        linea = ""
        For c = 0 To grid.rslt.Fields.Count - 1
            linea &= "\"" & grid.rslt[grid.rslt.Fields[c].name] & "\";"
        Next
        linea = Left(linea, -1) & gb.NewLine
        csv &= linea
        grid.rslt.movenext
    Wend
    File.Save(Dialog.Path, csv)
    Dec Application.busy
    Balloon("La lista se exportó en el fichero " & Dialog.path, grid)
    
End

Private Function verDefault_Read() As Boolean
    
    Return $verDefault
    
End

Private Sub verDefault_Write(Value As Boolean)
    
    $verDefault = Value
    If $verDefault And Not $SubMenu Then Me.SubMenu = Me.Menus[0]
    
End

Private Function posButtons_Read() As Integer
    
    Return $posButtons
    
End

Private Sub posButtons_Write(Value As Integer)
    
    If value <> Align.Bottom And Value <> Align.Right Then Return
    $posButtons = Value
    With pnbots
        Me.Arrangement = Arrange.None
        .Arrangement = Arrange.None
        Select Case $posButtons
            Case Align.Bottom 'bottom
                .left = 0
                .top = grid.height + 1
                .width = Me.Width
                .Height = 28
                buscar.Visible = True
                bBuscar.Visible = True
                .Raise
                .Arrangement = Arrange.Horizontal
                Me.Arrangement = Arrange.Vertical
                Wait 1
            Case Align.Right
                .left = Me.height - 30
                .Top = 0
                .width = 28
                .Height = 28
                buscar.Visible = False
                bBuscar.Visible = False
                .Arrangement = Arrange.Vertical
                Me.Arrangement = Arrange.Horizontal
        End Select
    End With
    
End
