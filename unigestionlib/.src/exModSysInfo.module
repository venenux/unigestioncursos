' Gambas module file

' System info resources utilities functions
'
' work based on Martín Belmonte compilation, 
' see: https://github.com/belmotek/gambas-extra-functions
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 2 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA
'
Export

''' modulo para funciones de informacion del sistema, depende de lsb (lsb-release en debian)

''' print a call to all the info functions of the module in formatted html
Public Function ResumeHuman() As String
    
    Dim strResume As String = ""
    ' ram make os able to install, OS depends, of processor/arch, processor depens on arch, and gambas depends of OS installed
    strResume &= "<b>Arch.Mach: </b>" & ArqSO()
    strResume &= "<b>Arch.Proc: </b>" & ArqMicro()
    strResume &= "<b>Processor: </b>" & Micro()
    strResume &= "<b>OS: </b>" & Distro()
    strResume &= "<b>Ram: </b>" & Ram()
    strResume &= "<b>Gambas.Vers: </b>" & System.Version
    strResume &= "<b>Gambas.Date: </b>" & LastUpgrade()
    strResume &= "<b>Hostname: </b>" & ComputerName()   ' this are not static to the OS
    strResume &= "<b>Desktop: </b>" & DskType()         ' this can change respect user
    strResume &= "<b>User: </b>" & CurrentUser()        ' this change respect who exec the prog
    strResume &= "<b>Users: </b>" & AllUsers()          ' this change ithe th euser are the admin
    strResume &= "<b>Usergroups: </b>" & WGroup()       ' this can be few or many if user are no winbuntu user
    ' the non static info respect gambas and OS are filled to the last..
    Return strResume
    
End

''' print a call to all the info functions of the module in Array form
Public Function ResumeArray() As Variant[]
    
    Dim strResume As New Variant[]
    ' ram make os able to install, OS depends, of processor/arch, processor depens on arch, and gambas depends of OS installed
    strResume.Add(ArqSO())
    strResume.Add(ArqMicro())
    strResume.Add(Micro())
    strResume.Add(Distro())
    strResume.Add(Ram())
    strResume.Add(System.Version)
    strResume.Add(LastUpgrade())
    strResume.Add(ComputerName())                       ' this are not static to the OS
    strResume.Add(DskType())                            ' this can change respect user
    strResume.Add(CurrentUser())                        ' this change respect who exec the prog
    strResume.Add(AllUsers())                           ' this change ithe th euser are the admin
    strResume.Add(WGroup())                             ' this can be few or many if user are no winbuntu user
    ' the non static info respect gambas and OS are filled to the last..
    Return strResume
    
End

''' print a call to all the info functions of the module in Array collection with key names form
Public Function ResumeCollec() As Collection
    
    Dim strResume As New Collection
    ' ram make os able to install, OS depends, of processor/arch, processor depens on arch, and gambas depends of OS installed
    strResume.Add(Distro(), "SO")
    strResume.Add(ArqSO(), "Arch.Mach")
    strResume.Add(ArqMicro(), "Arch.Proc")
    strResume.Add(Micro(), "Processor")
    strResume.Add(Ram(), "Ram")
    strResume.Add(System.Version, "Gambas.Vers")
    strResume.Add(LastUpgrade(), "Gambas.Date")
    strResume.Add(ComputerName(), "Hostname")           ' this are not static to the OS
    strResume.Add(DskType(), "Desktop")                  ' this can change respect user
    strResume.Add(CurrentUser(), "User")                ' this change respect who exec the prog
    strResume.Add(AllUsers(), "Users")                  ' this change ithe th euser are the admin
    strResume.Add(WGroup(), "Usersgroups")              ' this can be few or many if user are no winbuntu user
    ' the non static info respect gambas and OS are filled to the last..
    Return strResume
    
End

Public Function itsRunIDE() As Integer ''retorna 0 si esta ejecutando le programa en si como aplicaicon o como cgi, -1 si esta ejecutando en el IDE que puede emplearse como True si ejecuta en el IDE
    
    Dim strProcess As String
    
    strProcess = File.Load("/proc" &/ CStr(Application.Id) &/ "comm")
    If Left(strProcess, 4) = "gbx3" Then
        Return -1
    Else
        Return 0
    Endif
    
End

'' devuelve la distribución instalada xmi <br> @return String
Public Function Distro() As String
    
    Dim sDis As String
    
    Shell "lsb_release -d | cut -d':' -f2" To sDis
    Replace(sDis, gb.Tab, "")
    sDis = Trim(sDis)
    Return sDis
    
End

'' devuelve la distribución madre como nombre corto xmi <br> @return String
Public Function DistroShort() As String
    
    Dim strDistro As String
    Dim strDistroShort As String
    Dim intN As Integer
    
    Shell "lsb_release -si | cut -d' ' -f1" To strDistro
    strDistro = Trim(strDistro)
    strDistroShort = strDistro
    If Comp(strDistro, "") = 0 Then
        strDistroShort = "Desconocida"
    Endif
    Return strDistroShort
    
End

Public Function ArqSO() As String ''alias de System.Arquitecture, Arquitecura/tipo de maquina del Sistema Operativo <br> @return String
    
    Return System.Architecture
    
End

Public Function ArqMicro() As String ''alias de System.Arquitecture, Arquitecura/tipo de maquina del Sistema Operativo <br> @return String
    
    Dim sArqPro As String
    Shell "uname -a | cut -d' ' -f8" To sArqPro 'usar mejor el string completo porque a veces -p o -i da unkonw
    Return Replace(sArqPro, "\n", "")
    
End

Public Function Micro() As String 'devuelve el tipo de Procesador
    
    Dim sPro As String
    
    Shell "cat /proc/cpuinfo | grep -i 'model name'  | cut -f2 -d':'" To sPro
    Return LTrim(Replace(sPro, "\n", ""))
    
End

Public Function Ram() As String 'devuelve cantidad de Ram en MB tambien con free -m
    
    Dim sRam As String
    
    Exec ["cat", "/proc/meminfo"] To sRam
    Try sRam = Scan(sRam, "*MemTotal:*\n*")[1] 'Ocultamos el Error si no encuentra MenTotal: * \n
    If Error Then
        sRam = ""
    Else
        While Not IsDigit(Right(sRam))
            sRam = Left(sRam, -1)
        Wend
        sRam = Trim(sRam)
    Endif
    
    If sRam Then
        Try sRam = Format(CInt(sRam) / 1024, "0") & " MB"
        If Not Error Then Return sRam
    Endif
    
End

Public Function ComputerName() As String '' alias de *system.host* devuelve el nombre del pc
    
    Return System.Host
    
End

Public Function CurrentUser() As String '' alias de *system.user.name* devuelve el usuario activo
    
    Return System.User.Name
    
End

Public Function AllUsers() As String '' Devuelve los usuarios nivel normal via unix registro (passwd/shadow)
    
    Dim sUser As String
    
    Shell "cat /etc/passwd |grep -iw '100.' | cut -d ':' -f1" To sUser
    
    Return Replace(sUser, "\n", "")
    
End

Public Function DskType() As String 'devuelve el entorno del escritorio
    
    Dim sEscritorio As String
    'Shell "env | grep DESKTOP_SESSION= | cut -d '=' -f 2" To sEscritorio
    'sEscritorio = Desktop.Type
    
    Return Replace(sEscritorio, "\n", "")
    
End

Public Function WGroup() As String 'devuelve el Grupo de trabajo del pc
    
    Return System.Domain
    
End

Public Function SysFile(ruta As String) As String '' migrado: alias de [exModSysFile.getFileSys]
    
    Return exModSysFile.getFileSys(ruta)
    
End

Public Function ProjInfo(Optional strPath As String) As String[] ''Devuelve una matriz con la información del projecto alojada en el archivo ".project" si no se le pasa el camino del archivo .project del que se desea extraer la información la funcion devolvera los datos del proyecto local. Luego, el orden de cada item es el siguiente:<ol start="0"><li>Title</li><li>Description</li><li>Authors</li><li>Vendor</li><li>Version</li><li>Component</li><li>Language</li><li>Startup</li><li>Icon</li></ol>
    
    Dim stxKeys As New String[]
    Dim stxInfo As New String[]
    Dim strProject As String
    Dim stxTmp As New String[]
    Dim stxTag As New String[]
    Dim stxVal As New String[]
    Dim inten As Integer
    Dim intKey As Integer
    Dim intTag As Integer
    Dim strVal As String
    Dim intCount As Integer
    
    stxKeys.Add("Title")
    stxKeys.Add("Description")
    stxKeys.Add("Authors")
    stxKeys.Add("Vendor")
    stxKeys.Add("Version")
    stxKeys.Add("Component")
    stxKeys.Add("Language")
    stxKeys.Add("Startup")
    stxKeys.Add("Icon")
    
    stxInfo.Add("")
    stxInfo.Add("")
    stxInfo.Add("")
    stxInfo.Add("")
    stxInfo.Add("")
    stxInfo.Add("")
    stxInfo.Add("")
    stxInfo.Add("")
    stxInfo.Add("")
    
    If strPath = "" Then
        strPath = ".project"
    Endif
    
    If Exist(strPath) Then
        strProject = File.Load(strPath)
        stxTmp = Split(strProject, "\n")
        For inten = 0 To stxTmp.Max
            If InStr(stxTmp[inten], "=") > 0 Then
                Select Split(stxTmp[inten], "=")[0]
                    Case "Title", "Startup", "Icon", "Version", "Component", "Description", "Authors", "Language", "Vendor"
                        stxTag.Add(Split(stxTmp[inten], "=")[0])
                        strVal = Replace(Split(stxTmp[inten], "=")[1], Chr(34), "")
                        strVal = Replace(strVal, "\n", ":")
                        stxVal.Add(strVal)
                End Select
            Endif
        Next
    Endif
    
    If stxTag.Count > 0 Then
        For intKey = 0 To stxKeys.Max
            intCount = 0
            
            For intTag = 0 To stxTag.max
                
                If stxTag[intTag] = stxKeys[intKey] Then
                    
                    Select intCount
                        Case 0
                            stxInfo[intKey] &= stxVal[intTag]
                        Case Else
                            stxInfo[intKey] &= ":" & stxVal[intTag]
                    End Select
                    
                    Inc intCount
                    
                Endif
                
            Next
            
        Next
        
    Endif
    
    Return stxInfo
    
End

Public Function Ls(Ruta As String) As String 'devuelve un listado del directorio pasado en ruta
    
    Dim sListado As String
    
    Shell "ls -a " & Ruta To sListado 'Almacenamos listado directorio
    Return RTrim(Replace(sListado, "\n", ":"))
    'Otros comandos que devuelven un listado con las aplicaciones instaladas
    ' dpkg - l
    ' dpkg --get-selections es igual a dpkg -l | cut -d ' ' -f3
    
End

Public Function AddressIP() As String 'devuelve las Ips configuradas en el equipo
    
    Dim sIPs As String
    
    sIPs = exModSysNet.getIpdef(exModSysNet.getIfdef())
    Return RTrim(Replace(sIPs, "\n", " "))
    
End

Public Function LastNIP() As String 'devuelve el último digito de la Ip
    
    Dim sIPs As String[]
    
    sIPs = Split(exModSysNet.getIpdef(exModSysNet.getIfdef()), ".")
    Return RTrim(Replace(sIPs[sIPs.Max], "\n", " "))
    
End

Public Function Hdserial() As String 'devuelve el número de serie del disco duro para utilizarlo como Pk en la BDD
    
    Dim sNS As String
    
    Shell "udevadm info --query=property --name=sda | grep SERIAL_ | awk -F '=' '{print $2}'" To sNS ' TODO use hdparm
    Return RTrim(Replace(sNS, "\n", " "))
    
End

Public Function UUIDswap() As String
    'devuelve UUID de la swap para utilizarlo como PK de la BDD
    'Requiere permisos de Administrador
    
    Dim sUID As String
    
    Shell "blkid | grep swap | cut -d ' ' -f2 |cut -d '=' -f2" To sUID
    Return Left(Right(sUID, -1), -2)
    
End

Public Function LastUpgrade() As String 'devuelve la Fecha de la ultima vez que se actualizo el sistema
    
    'Dim Result As String
    Dim long_iso As String
    Dim strDistroShort As String
    Dim strLastUpgrade As String
    
    long_iso = "long-iso"
    
    strDistroShort = DistroShort() ' TODO
    
    Select strDistroShort
        Case "debian"
            strLastUpgrade = Format$(Stat("/var/log/apt").Time, "yyyy/mm/dd hh:nn:ss")
            strLastUpgrade = RTrim(Replace(strLastUpgrade, "\n", " "))
            
        Case Else
            strLastUpgrade = ("Desconocido")
    End Select
    
    Return strLastUpgrade
    
End

Public Function XDGFolder() As String[] '' Devuelve una matriz de texto con las rutas de las carpetas de musica, imagenes, documentos etc. del directorio /home/user
    
    Dim strHome As String
    Dim stxXDGTmp As New String[]
    Dim stxXDGFolders As New String[]
    Dim strDirsFile As String
    Dim strFlux As String
    Dim intL As Integer
    Dim strTmp As String
    Dim strVar As String
    Dim strFolder As String
    
    strHome = User.Home
    
    strDirsFile = strHome &/ ".config/user-dirs.dirs"
    
    If Exist(strDirsFile) Then
        strFlux = File.Load(strDirsFile)
        
        stxXDGTmp = Split(strFlux, gb.NewLine)
        
        For intL = 0 To stxXDGTmp.Max
            strTmp = stxXDGTmp[intL]
            If strTmp <> "" Then
                If String.Mid(strTmp, 1, 4) = "XDG_" Then
                    If InStr(strTmp, "=")
                        
                        strVar = ""
                        strFolder = ""
                        
                        strVar = Split(strTmp, "=")[0]
                        strVar = Split(strVar, "_")[1]
                        strVar = String.LCase(strVar)
                        
                        strFolder = Split(strTmp, "=")[1]
                        strFolder = Replace(strFolder, "$HOME/", "")
                        strFolder = Replace(strFolder, Chr(34), "")
                        strFolder = strHome &/ strFolder
                        
                        stxXDGFolders.Add(strVar & ":" & strFolder)
                        
                    Endif
                Endif
            Endif
        Next
    Endif
    
    Return stxXDGFolders
    
End

